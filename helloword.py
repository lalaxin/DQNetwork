import math
import random
import copy
# random.seed(3)
#区域单元格长度,和单元格的数量
celllength=2
cell=2  #横向
cellnum=cell*cell
#定义区域，（用户数，区域内车辆数,区域内缺车的数量,中心点横坐标，中心点纵坐标）
# initRegion=[[0]for i in range(cellnum)]
Region=[[0] for i in range(cellnum)]
for i in range(cellnum):
    Region[i]=[0,random.randint(1,2),random.randint(0,10),(i%cell)*celllength+celllength/2,(int(i/cell))*celllength+celllength/2]
print(Region)
Region=[[0, 2, 6, 1.0, 1.0], [0, 1, 10, 3.0, 1.0], [0, 1, 3, 1.0, 3.0], [0, 2, 9, 3.0, 3.0]]
# Region=[[0, 2, 6, 1.0, 1.0], [0, 1, 10, 3.0, 1.0], [0, 1, 3, 1.0, 3.0], [0, 2, 9, 3.0, 3.0]]
# Region= [[0, 1, 4, 1.0, 1.0], [0, 1, 0, 3.0, 1.0], [0, 1, 0, 5.0, 1.0], [0, 2, 2, 1.0, 3.0], [0, 2, 0, 3.0, 3.0], [0, 1, 5, 5.0, 3.0], [0, 1, 0, 1.0, 5.0], [0, 2, 0, 3.0, 5.0], [0, 1, 0, 5.0, 5.0]]
# Region=[[0, 1, 1, 1.0, 1.0], [0, 1, 2, 3.0, 1.0], [0, 2, 5, 1.0, 3.0], [0, 2, 1, 3.0, 3.0]]
# Region=[[0, 2, 3, 1.0, 1.0], [0, 2, 3, 3.0, 1.0], [0, 2, 1, 1.0, 3.0], [0, 1, 9, 3.0, 3.0]]
initRegion=copy.deepcopy(Region)

# 用户数量
usernum=6
# 定义用户数组（起点横坐标，起点纵坐标，终点横坐标，终点纵坐标，最大步行距离,期望停车区域横坐标，期望停车区域纵坐标）
User=[[0 for i in range(3)]for i in range(usernum)]
for i in range(usernum):
    User[i]=[random.randint(0,celllength*cell),random.randint(0,celllength*cell),random.randint(0,celllength*cell),random.randint(0,celllength*cell),random.uniform(0,celllength/2),-1,-1]
print("用户向量：")
User=[[4, 4, 4, 1, 0.9568767390288544, -1, -1], [0, 0, 3, 0, 0.3508448982850835, -1, -1], [2, 1, 2, 4, 0.5086846864053723, -1, -1], [0, 3, 1, 2, 0.4112544710484871, -1, -1],[2, 1, 2, 0, 0.7062465057950914, -1, -1], [4, 4, 2, 1, 0.40560560060411144, -1, -1]]
# User=[[4, 4, 4, 1, 0.9568767390288544, -1, -1], [0, 0, 3, 0, 0.3508448982850835, -1, -1], [2, 1, 2, 4, 0.5086846864053723, -1, -1], [0, 3, 1, 2, 0.4112544710484871, -1, -1], [2, 1, 2, 0, 0.7062465057950914, -1, -1]]
# User=[[3, 4, 2, 3, 0.8698457615067331, -1, -1], [4, 3, 3, 1, 0.025542513845298598, -1, -1], [2, 3, 2, 0, 0.6471126760855576, -1, -1], [1, 3, 3, 0, 0.5108759080947439, -1, -1], [0, 3, 1, 0, 0.8126661386965709, -1, -1], [4, 4, 2, 1, 0.40560560060411144, -1, -1], [2, 4, 0, 2, 0.8774814358165851, -1, -1], [3, 4, 4, 2, 0.7043181544494604, -1, -1], [3, 0, 1, 3, 0.19823195069055288, -1, -1], [3, 3, 0, 3, 0.09315249183555396, -1, -1], [3, 4, 2, 1, 0.36672149874966453, -1, -1], [1, 0, 3, 0, 0.6097698986747053, -1, -1], [0, 3, 1, 3, 0.09875124451055073, -1, -1], [2, 3, 4, 2, 0.6651422988093997, -1, -1], [2, 0, 3, 2, 0.3398261754993982, -1, -1], [1, 4, 2, 3, 0.6626164411222216, -1, -1], [1, 2, 0, 3, 0.44338501387113793, -1, -1], [4, 2, 4, 1, 0.18429173855257663, -1, -1], [1, 2, 4, 4, 0.49441400690799286, -1, -1], [1, 3, 4, 0, 0.7703540776552505, -1, -1], [0, 3, 1, 2, 0.4548008662630253, -1, -1], [0, 0, 1, 2, 0.7821901045153896, -1, -1], [3, 1, 0, 2, 0.05165850791184334, -1, -1], [3, 2, 2, 3, 0.3318349202947585, -1, -1], [2, 0, 1, 1, 0.978870493577911, -1, -1], [1, 0, 0, 0, 0.32694317541000373, -1, -1], [4, 1, 0, 2, 0.8871209149419826, -1, -1], [0, 1, 0, 2, 0.6072233929760302, -1, -1], [2, 1, 0, 4, 0.07203432476311644, -1, -1], [4, 1, 2, 0, 0.7433881517594553, -1, -1], [4, 0, 1, 3, 0.9442046911867316, -1, -1], [2, 1, 2, 2, 0.9312905570965193, -1, -1], [3, 1, 1, 3, 0.8715587686495048, -1, -1], [1, 3, 1, 3, 0.490267723157503, -1, -1], [1, 3, 2, 4, 0.016685985440300977, -1, -1], [3, 1, 1, 1, 0.782889848380481, -1, -1], [1, 4, 2, 3, 0.4339864648023679, -1, -1], [2, 3, 0, 4, 0.9274786775602524, -1, -1], [0, 3, 0, 1, 0.6758396999910996, -1, -1], [1, 3, 4, 1, 0.7431429776455821, -1, -1], [3, 1, 1, 1, 0.6599855110239871, -1, -1], [0, 1, 0, 2, 0.2546463395003121, -1, -1], [1, 1, 3, 1, 0.14294288882394057, -1, -1], [3, 3, 0, 4, 0.6850517646549807, -1, -1], [0, 0, 2, 2, 0.9692568668792939, -1, -1], [2, 1, 4, 1, 0.8382757047183428, -1, -1], [3, 0, 3, 1, 0.7900450455901256, -1, -1], [4, 3, 3, 1, 0.3569274231035239, -1, -1], [3, 3, 1, 2, 0.48817755268455953, -1, -1], [3, 4, 3, 0, 0.020940781691284105, -1, -1]]
# User=[[0, 3, 2, 1, 0.885884880110662, -1, -1], [1, 2, 3, 4, 0.5659811726331987, -1, -1], [2, 4, 4, 2, 0.5407720357765418, -1, -1], [1, 4, 1, 3, 0.7978709590367652, -1, -1], [2, 1, 2, 4, 0.676546362965138, -1, -1], [1, 0, 1, 2, 0.11269828933271953, -1, -1], [2, 0, 3, 2, 0.8973921898707914, -1, -1], [1, 0, 1, 0, 0.5207873538810055, -1, -1], [1, 0, 3, 1, 0.9389452653088556, -1, -1], [4, 4, 0, 0, 0.20881356256292505, -1, -1], [2, 0, 1, 2, 0.18938069043366257, -1, -1], [0, 3, 2, 0, 0.42015962159949904, -1, -1], [0, 0, 1, 1, 0.23854101101902725, -1, -1], [0, 0, 1, 2, 0.23543236958028813, -1, -1], [4, 1, 2, 1, 0.14342028360583214, -1, -1], [3, 1, 4, 4, 0.44416757153653386, -1, -1], [4, 2, 3, 1, 0.1756828697984676, -1, -1], [1, 3, 3, 2, 0.6349858617929821, -1, -1], [1, 1, 2, 3, 0.8458361066967882, -1, -1], [3, 0, 4, 4, 0.6921436321357072, -1, -1]]
# User=[[3, 1, 4, 3, 0.8579863150590168, -1, -1], [0, 3, 4, 3, 0.8484607308151744, -1, -1]]
# User=[[1, 0, 2, 0, 0.3946959729876678, -1, -1], [4, 3, 1, 4, 0.010880761865019517, -1, -1], [4, 4, 1, 3, 0.7082958367039482, -1, -1], [4, 4, 3, 2, 0.9228441820326235, -1, -1], [4, 3, 0, 0, 0.8443346344871827, -1, -1], [4, 0, 2, 0, 0.0692215254174513, -1, -1], [1, 4, 3, 4, 0.9103334623807263, -1, -1], [0, 3, 4, 3, 0.04988318434751693, -1, -1], [4, 0, 0, 2, 0.7951211057509818, -1, -1], [2, 2, 3, 3, 0.2913361574050507, -1, -1]]
# User=[[3, 4, 4, 1, 0.9452135914201657, -1, -1]]
# User=[[3, 2, 2, 2, 0.4575244425409053, -1, -1], [0, 2, 2, 2, 0.0508917219869216, -1, -1], [4, 0, 2, 2, 0.43319879426122676, -1, -1], [3, 5, 2, 2, 0.4433833325460701, -1, -1], [3, 3, 2, 2, 0.6914008294175049, -1, -1], [5, 1, 0, 2, 1.9044889105823875, -1, -1], [0, 3, 0, 2, 1.844377124939775, -1, -1], [0, 1, 0, 2, 1.7198930575905798, -1, -1], [0, 5, 0, 2, 1.9465045140861237, -1, -1], [4, 3, 0, 2, 1.8203701178775067, -1, -1]]
# User=[[0, 4, 1, 0, 1.9600491545940255, -1, -1], [3, 3, 4, 1, 0.34054776770947903, -1, -1], [1, 3, 3, 2, 1.1197767155333611, -1, -1], [4, 1, 3, 3, 0.13062851179209045, -1, -1], [0, 0, 0, 1, 0.9902580882972107, -1, -1], [0, 1, 3, 2, 1.0444216894194467, -1, -1], [2, 1, 2, 1, 1.6452464424075186, -1, -1], [1, 3, 0, 0, 1.505755224478661, -1, -1], [0, 1, 1, 1, 0.03463474667320621, -1, -1], [0, 4, 3, 1, 1.9402073600321552, -1, -1]]
# User=[[4, 1, 1, 0, 0.8958514309509997, -1, -1], [0, 1, 4, 2, 1.9778556055141452, -1, -1], [4, 3, 2, 1, 0.3746564043951499, -1, -1], [3, 0, 4, 4, 1.7021057929127683, -1, -1], [3, 0, 4, 3, 0.10805816528169232, -1, -1], [3, 4, 4, 1, 0.3865072985351632, -1, -1], [2, 1, 1, 0, 1.1085688433320942, -1, -1], [3, 2, 3, 0, 1.0149513925292595, -1, -1], [0, 1, 3, 1, 1.3122772770324782, -1, -1], [4, 4, 0, 2, 1.7151115613018324, -1, -1]]
print(User)


# 判断用户所在的区域，并计算每个区域的缺车数量
def regionlackbike(region,user):
    a=100000
    for i in range(usernum):
        if(user[i][0]==cell*celllength):
            a=int(user[i][1]/celllength)*cell+int(user[i][0]/celllength)-1
        elif(user[i][1]==cell*celllength):
            a=int(user[i][1] / celllength) * cell + int(user[i][0] / celllength)-cell
        elif(user[i][0]==cell*celllength & user[i][1]==cell*celllength):
            a=cellnum-1
        else:
            a=int(user[i][1]/celllength)*cell+int(user[i][0]/celllength)
        # print(a)
        if(a<=cellnum):
            region[a][0]+=1
    for i in range(cellnum):
        region[i][2]=region[i][0]-region[i][1]
# regionlackbike(Region,User)
# print("区域向量：")
# print(Region)


# 根据用户的目的地匹配需求较高的区域
#根据缺车区域匹配最近的用户
def matchregion(region, user):
    distance = 0
    #根据用户匹配缺车和根据缺车匹配用户
    # for i in range(cellnum):
    #     if(Region[i][2]!=0):
    #         for j in range (Region[i][2]):
    #             d=100000
    #             for k in range (usernum):
    #                 dpath = math.sqrt(math.pow(Region[j][3] - User[k][2], 2) + math.pow(Region[j][4] - User[k][3], 2))
    #                 if(dpath<=d and User[k][5] == -1): #如果用户已经分配了缺车位置，则即使小于也跳过
    #                     b=k
    #                     d=dpath
    #             distance +=d
    #             if(b!=-1):
    #                 User[b][5]=Region[i][3]
    #                 User[b][6]=Region[i][4]
    for i in range(usernum):
        b = -1
        d=1e10
        for j in range (cellnum):
            if(region[j][2]>0):
                for k in range (region[j][2]):
                    dpath=math.sqrt(math.pow(region[j][3]-user[i][2],2)+math.pow(region[j][4]-user[i][3],2))
                    if(dpath <= d and region[j][2] > 0):  # 如果用户已经分配了缺车位置，则即使小于也跳过
                        b = j
                        d = dpath
        if (b != -1):
            distance += d
            region[b][2] -= 1
            user[i][5] = region[b][3]
            user[i][6] = region[b][4]
    # print("greedydistance",distance)
    return user
initUser=copy.deepcopy(User)
uuser=matchregion(initRegion,initUser)
# matchregion(initRegion,User)
# print(User)
# print(initRegion)
# print(Region)




# class User:
#     def __init__(self,startPoint,arrivePoint,wishPoint):
#         self.startPoint=startPoint
#         self.arrivePoint=arrivePoint
#         self.wishPoint=wishPoint
#
#
#     def Costwalk(self):
#         d1=math.pow((self.arrivePoint[0]-self.wishPoint[0]),2)+math.pow((self.arrivePoint[1]-self.wishPoint[1]),2)
#         da=math.pow(d1,.5)
#         print("%s,%s" % ("d1", d1))
#         print("%s,%s" % ("da", da))
#         k=0.3
#         costwalk=k*math.pow(d1,2)
#         #print(costwalk)
#         return costwalk
#
#     def Costride(self):
#         d2=math.pow((self.arrivePoint[0]-self.startPoint[0]),2)+math.pow((self.arrivePoint[1]-self.startPoint[1]),2)
#         print(d2)
#         p=0.5
#         costride=p*d2
#         return costride


# bstartPoint=list(2,2)
# barrivePoint=list(4,4)
# # bstartPoint=Point(2,2)
# # barrivePoint=Point(4,4)
# class Bike:
#     def __init__(self,bstartPoint,barrivePoint):
#         self.bstartPoint=bstartPoint
#         self.barrivePoint=barrivePoint




# # 判断每个区域内的用户的数量和车的数量，判断该区域是否缺车以及缺车数量
# def user_region(userspoint):
#     userpoint[0]//2



# class region:
#     def __init__(self, usernuber, bikenumber):
#         self.usernumber=usernuber
#         self.bikenumber=bikenumber

# s=User(startPoint,arrivePoint,wishPoint)
# print("%s,%s" % ("s", s.Costwalk()))

